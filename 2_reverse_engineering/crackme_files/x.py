# Lista di byte da ciclare
xor_result = [0x7f, 0xef, 0xe8, 0xb5, 0x15, 0x73, 0xb4, 0x6a, 0xa7, 0x7d, 0x48, 0xdd, 0xea, 0x6a, 0x9d, 0xaa,
              0x82, 0xfa, 0x6e, 0xe4, 0xf6, 0x23, 0x9b, 0xd9, 0x78, 0xab, 0x1b, 0x9b, 0x16, 0x96, 0x9c, 0x2e, 0x6f,
              0xb2, 0xc7, 0x0c, 0x17, 0x00, 0x00]

chiave = [
    0x19, 0x83, 0x89, 0xd2, 0x6e, 0x1f, 0x84, 0x1c, 0x94, 0x11, 0x31, 0x82, 0xde, 0x04, 0xe9, 0x9b,
    0xf0, 0xc9, 0x18, 0xbb, 0x82, 0x51, 0xaa, 0xba, 0x13, 0x9e, 0x44, 0xec, 0x49, 0xe5, 0xad, 0x49,
    0x01, 0x86, 0xab, 0x39, 0x6a, 0x00, 0x00]

# Verifica che le due liste abbiano la stessa lunghezza
if len(xor_result) != len(chiave):
    raise ValueError("Le liste devono avere la stessa lunghezza")

# Lista per memorizzare i risultati XOR in formato ASCII
risultati_ascii = []

# Ciclo attraverso i byte e calcola l'XOR
for byte1, byte2 in zip(xor_result, chiave):
    xor_result = byte1 ^ byte2
    risultati_ascii.append(chr(xor_result))

# Unica stringa composta da tutti i simboli
stringa_composta = "".join(risultati_ascii)

# Visualizza i risultati XOR in formato ASCII
print(f"Risultato XOR in ASCII: {stringa_composta}")
